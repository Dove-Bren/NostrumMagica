buildscript {
    repositories {
		mavenCentral()
		maven { url = 'https://maven.minecraftforge.net/' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.0.+'
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = "1.14.4-1.10.3"
group= "com.smanzana.nostrummagica" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "nostrummagica"

sourceCompatibility = targetCompatibility = "1.8" // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = "1.8"
}

minecraft {
	mappings channel: 'snapshot', version: '20191111-1.14.3'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
	
	// accessTransformer = file('build/resources/main/META-INF/accesstransformer.cfg')
	runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
			
			args '--username', 'testplayer'
        }

        server {

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }
    }
}

repositories { 
	mavenCentral()
	maven {
        url = "https://maven.blamejared.com"
    }
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven {
    	name = "CurseForge"
        url = "https://minecraft.curseforge.com/api/maven/"
    }
    maven {
        name = "thiakil"
        url = "http://maven.thiakil.com"
    }

    maven { // TOP
        name 'tterrag maven'
        url "https://maven.tterrag.com/"
    }
	
    maven {
		// curios, Caelus
		name "curios"
        url = "https://maven.theillusivec4.top/"
    }
}

dependencies {
	minecraft 'net.minecraftforge:forge:1.14.4-28.1.92'
	
    compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}")
	
	//compile "com.enderio:EnderIO:1.12.2-5.3.70"
	//fg.deobf "com.enderio.core:EnderCore:1.12.2-0.5.76"
    //fg.deobf("com.enderio:EnderIO:1.12.2-5.3.68") {
    //    exclude group: 'com.enderio', module: 'ap'
    //    exclude group: "deobf.com.enderio.core"
    //}

    //compile "baubles:baubles:1.12:1.5.2"
	runtimeOnly fg.deobf("top.theillusivec4.curios:curios:${curios_version}")
    compileOnly fg.deobf("top.theillusivec4.curios:curios:${curios_version}:api")
	
	//compile 'top.theillusivec4.caelus:caelus:${caelus_version}'
	compileOnly fg.deobf("top.theillusivec4.caelus:caelus:${caelus_version}")
	
	compileOnly files("libs/NostrumAetheriaAPI-${aetheria_version}.jar")
	runtimeOnly files("libs/NostrumAetheriaAPI-${aetheria_version}.jar")
	compileOnly files("libs/musica-${musica_version}.jar")
	runtimeOnly files("libs/musica-${musica_version}.jar")

    // You may put jars on which you depend on in ./libs or you may define them like so..
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"

    // Real examples
    // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // These dependencies get remapped to your current MCP mappings
    // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html


}

processResources
{
    // this will ensure that this task is redone when the versions change.
    //inputs.property "version", project.version
    //inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    //from(sourceSets.main.resources.srcDirs) {
    //    include 'mcmod.info'
    //            
    //    // replace version and mcversion
    //   // expand 'version':version, 'mcversion':project.minecraft.version
    //}
        
    // copy everything else, thats not the mcmod.info
    //from(sourceSets.main.resources.srcDirs) {
    //    exclude 'mcmod.info'
    //}
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allJava
}

task deobfJar(type: Jar) {
    classifier = 'deobf'
    from sourceSets.main.output
}

tasks.build.dependsOn sourcesJar, deobfJar


//task coreJar(type: Jar) {
//	from(sourceSets.main.output) {
//		include 'com/smanzana/nostrummagica/transforms/**'
//		include 'com/smanzana/nostrummagica/config/**'
//	}
//	manifest {
//		attributes 'FMLCorePlugin': 'com.smanzana.nostrummagica.transforms.NostrumTransformPlugin'
//		attributes 'FMLCorePluginContainsFMLMod': 'true'
//	}
//	classifier = 'core'
//}

//task deobfJar(type: Jar) {
//	from sourceSets.main.output
//	classifier = 'deobf'
//}

jar {
	exclude 'com/smanzana/nostrummagica/transforms/**'
	//from(coreJar.archivePath.absolutePath) {
	//	include '*'
	//	into ("META-INF/libraries")
	//}
	manifest {
		attributes ([
			//"ContainedDeps": coreJar.archivePath.name,
			"Specification-Title": "examplemod",
            "Specification-Vendor": "examplemodsareus",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"examplemodsareus",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}
}


//reobf {
//	coreJar { mappingType = 'SEARGE' }
//}

//def reobfFile = file("$buildDir/reobfJar/output.jar")
//def reobfArtifact = artifacts.add('default', reobfFile) {
//    type 'jar'
//    builtBy 'reobfJar'
//}



//runClient {
	//args '--username', 'testplayer'
//}	


//build.dependsOn coreJar, deobfJar, jar
