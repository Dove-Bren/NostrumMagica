buildscript {
    repositories {
		mavenCentral()
		maven { url = 'https://maven.minecraftforge.net/' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = "1.17.1-1.12.0"
group= "com.smanzana.nostrummagica" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "nostrummagica"

java.toolchain.languageVersion = JavaLanguageVersion.of(16)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
	mappings channel: 'official', version: "1.17.1"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
	
	 // Structures in 1.16.x require you to place them in some vanilla maps which are private variables
    // The access transformer allows us to make them public so we can place our structures in them
	accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
	
	// accessTransformer = file('build/resources/main/META-INF/accesstransformer.cfg')
	runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
			
			// Curios requires mixins
			//property 'mixin.env.remapRefMap', 'true'
			//property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
			property 'mixin.env.disableRefMap', 'true'

            mods {
                nostrummagica {
                    source sourceSets.main
                }
            }
			
			args '--username', 'testplayer'
        }

        server {

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
			
			// Curios requires mixins
			//property 'mixin.env.remapRefMap', 'true'
			//property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                nostrummagica {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'nostrummagica', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                nostrummagica {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories { 
	mavenCentral()
	
	flatDir {
		dir 'libs'
	}
	
	maven {
        url = "https://maven.blamejared.com"
    }
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven {
    	name = "CurseForge"
        url = "https://minecraft.curseforge.com/api/maven/"
    }
    maven {
        name = "thiakil"
        url = "https://maven.thiakil.com"
    }

    maven { // TOP
        name 'tterrag maven'
        url "https://maven.tterrag.com/"
    }
	
    maven {
		// curios, Caelus
		name "curios"
        url = "https://maven.theillusivec4.top/"
    }
	
	maven {
        name 'MineColonies'
        url 'https://ldtteam.jfrog.io/ldtteam/modding'
        content {
            includeGroup 'com.minecolonies'
            includeGroup 'com.ldtteam'
        }
    }
	
	maven {
        name 'CurseMaven'
        url 'https://www.cursemaven.com'
    }
}

dependencies {
	minecraft 'net.minecraftforge:forge:1.17.1-37.1.1'
	
    compileOnly fg.deobf("mezz.jei:jei-${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${jei_version}")

	runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}")
    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}:api")
	
	//compile 'top.theillusivec4.caelus:caelus-forge:${caelus_version}'
	implementation fg.deobf("top.theillusivec4.caelus:caelus-forge:${caelus_version}")
	
	//compileOnly fg.deobf("com.smanzana:nostrumaetheria:${aetheria_version}:api")
	////runtimeOnly fg.deobf("com.smanzana:nostrumaetheria:${aetheria_version}")
	
	//compileOnly fg.deobf("com.smanzana:musica:${musica_version}")
	//runtimeOnly fg.deobf("com.smanzana:musica:${musica_version}")
	
	runtimeOnly fg.deobf("com.smanzana:petcommand:${petcommand_version}")
	compileOnly fg.deobf("com.smanzana:petcommand:${petcommand_version}:api")
	
	runtimeOnly fg.deobf("com.smanzana:autodungeons:${autodungeons_version}")
	compileOnly fg.deobf("com.smanzana:autodungeons:${autodungeons_version}")
	
	compileOnly fg.deobf("local:minecolonies:${minecolonies_version}:api")
	//runtimeOnly fg.deobf("local:minecolonies:${minecolonies_version}")
	implementation fg.deobf("curse.maven:structurize-298744:${structurize_version}")
	implementation fg.deobf("curse.maven:blockui-522992:${blockui_version}")
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allJava
}

task deobfJar(type: Jar) {
    classifier = 'deobf'
    from sourceSets.main.output
}

tasks.build.dependsOn sourcesJar, deobfJar


//task coreJar(type: Jar) {
//	from(sourceSets.main.output) {
//		include 'com/smanzana/nostrummagica/transforms/**'
//		include 'com/smanzana/nostrummagica/config/**'
//	}
//	manifest {
//		attributes 'FMLCorePlugin': 'com.smanzana.nostrummagica.transforms.NostrumTransformPlugin'
//		attributes 'FMLCorePluginContainsFMLMod': 'true'
//	}
//	classifier = 'core'
//}

jar {
	exclude 'com/smanzana/nostrummagica/transforms/**'
	//from(coreJar.archivePath.absolutePath) {
	//	include '*'
	//	into ("META-INF/libraries")
	//}
	manifest {
		attributes ([
			//"ContainedDeps": coreJar.archivePath.name,
			"Specification-Title": "nostrummagica",
            "Specification-Vendor": "smanzanares",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"smanzanares",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}
}



