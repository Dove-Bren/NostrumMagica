plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
}

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
	mappings channel: mapping_channel, version: mapping_version
	
	copyIdeResources = true
	
	 // Structures in 1.16.x require you to place them in some vanilla maps which are private variables
    // The access transformer allows us to make them public so we can place our structures in them
	accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
	
	// accessTransformer = file('build/resources/main/META-INF/accesstransformer.cfg')
	runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
			
			// Curios requires mixins
			//property 'mixin.env.remapRefMap', 'true'
			//property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
			property 'mixin.env.disableRefMap', 'true'

            mods {
                nostrummagica {
                    source sourceSets.main
                }
            }
			
			args '--username', 'testplayer'
        }

        server {

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
			
			// Curios requires mixins
			//property 'mixin.env.remapRefMap', 'true'
			//property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                nostrummagica {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'nostrummagica', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                nostrummagica {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories { 
	mavenCentral()
	
	flatDir {
		dir 'libs'
	}
	
	maven {
		// Local mods that aren't available on the net
		name = "Local Maven"
		url = "file://${local_maven_path}"
	}
	
	maven {
		// location of the maven that hosts JEI files since January 2023
		name = "Jared's maven"
		url = "https://maven.blamejared.com/"
	  }
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven {
    	name = "CurseForge"
        url = "https://minecraft.curseforge.com/api/maven/"
    }
    maven {
        name = "thiakil"
        url = "https://maven.thiakil.com"
    }

    maven { // TOP
        name 'tterrag maven'
        url "https://maven.tterrag.com/"
    }
	
    maven {
		// curios, Caelus
		name "curios"
        url = "https://maven.theillusivec4.top/"
    }
	
	maven {
        name 'MineColonies'
        url 'https://ldtteam.jfrog.io/ldtteam/modding'
        content {
            includeGroup 'com.minecolonies'
            includeGroup 'com.ldtteam'
        }
    }
	
	maven {
        name 'CurseMaven'
        url 'https://www.cursemaven.com'
    }
}

dependencies {
	minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
	
	compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"))
    compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}"))
    runtimeOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}"))

	runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}")
    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}:api")
	
	//compile 'top.theillusivec4.caelus:caelus-forge:${caelus_version}'
	implementation fg.deobf("top.theillusivec4.caelus:caelus-forge:${caelus_version}")
	
	compileOnly fg.deobf("com.smanzana.nostrumaetheria:nostrumaetheria:${aetheria_version}:api")
	runtimeOnly fg.deobf("com.smanzana.nostrumaetheria:nostrumaetheria:${aetheria_version}")
	
	runtimeOnly fg.deobf("com.smanzana.petcommand:petcommand:${petcommand_version}")
	compileOnly fg.deobf("com.smanzana.petcommand:petcommand:${petcommand_version}:api")
	
	runtimeOnly fg.deobf("com.smanzana.autodungeons:autodungeons:${autodungeons_version}")
	compileOnly fg.deobf("com.smanzana.autodungeons:autodungeons:${autodungeons_version}")
	
	compileOnly fg.deobf("local:minecolonies:${minecolonies_version}:api")
	//runtimeOnly fg.deobf("local:minecolonies:${minecolonies_version}")
	//implementation fg.deobf("curse.maven:structurize-298744:${structurize_version}")
	//implementation fg.deobf("curse.maven:blockui-522992:${blockui_version}")
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.allJava
}

task deobfJar(type: Jar) {
    archiveClassifier.set('deobf')
    from sourceSets.main.output
}

tasks.build.dependsOn sourcesJar, deobfJar


//task coreJar(type: Jar) {
//	from(sourceSets.main.output) {
//		include 'com/smanzana/nostrummagica/transforms/**'
//		include 'com/smanzana/nostrummagica/config/**'
//	}
//	manifest {
//		attributes 'FMLCorePlugin': 'com.smanzana.nostrummagica.transforms.NostrumTransformPlugin'
//		attributes 'FMLCorePluginContainsFMLMod': 'true'
//	}
//	classifier = 'core'
//}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,
			
			curios_version: curios_version,
			caelus_version: caelus_version,
			aetheria_version: aetheria_version,
			petcommand_version: petcommand_version,
			autodungeons_version: autodungeons_version,
			minecolonies_version: minecolonies_version,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

// Example for how to get properties into the manifest for reading by the runtime..
tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    // This is the preferred method to reobfuscate your jar file
    finalizedBy 'reobfJar'
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${local_maven_path}"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
